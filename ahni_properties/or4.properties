#random.seed=0
run.name=OR4-S-6
run.reset=true

###########
# evolution
###########
num.runs=30
num.generations=50
popul.size=250
performance.target=1.1
performance.target.type=higher

#false means mutation probabilities are applied to all possible places a mutation could occur
#true means probabilities apply to individual as a whole; only one topological mutation can occur per individual
#note that this applies only to topological mutations, not weight mutations
topology.mutation.classic=true

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.03
add.neuron.mutation.rate=0.25
#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.4
add.connection.mutation.rate=0.5
#[0.01, 0.3]
remove.connection.mutation.rate=0.02
#only remove weights with magnitude smaller than this
remove.connection.max.weight=50

#should be 1.0
prune.mutation.rate=1.0

#[0.1, 0.8]. 0.5, 0.6
weight.mutation.rate=0.1
#[1.0, 2.0] dependent on weight.max/min?
weight.mutation.std.dev=1.0


#percent of individuals used as parents
survival.rate=0.3
#proportion of sexual (crossover) versus asexual reproduction
crossover.proportion=0.5

#[1, 5]
selector.elitism.min.specie.size=4
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.1
#min number to select from a species (if it has size >=  selector.elitism.min.specie.size)
selector.elitism.min.to.select=1
selector.roulette=false
selector.max.stagnant.generations=99999
selector.speciated.fitness=true


############
# speciation
############
#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=2.0
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=2.0
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=1.0

#compatability threshold [0.1, 4.0], relative to c#
speciation.threshold=1.9
speciation.target=15
speciation.threshold.change=0.1


##################
# fitness function
##################
fitness_function.class=com.ojcoleman.ahni.experiments.objectrecognition.ObjectRecognitionFitnessFunction4
fitness.target=1
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=0
#if scale.factor > 1 then the substrate height, width and connection.range 
#will be multiplied by scale.factor every time scale.fitness is reached, at 
#most scale.times times. If the 
fitness.hyperneat.scale.factor=2
fitness.hyperneat.scale.times=0
fitness.hyperneat.scale.performance=0.95
fitness.hyperneat.scale.recordintermediateperformance=true

#experiment specific
or.shapesize=21
or.shapetype=random vh
or.numedgesinshape=4
or.numshapesinlibrary=5
or.numnontargetshapesshown=1
or.targetshapeindex=0
or.minscale=0.5
or.maxrotate=0
or.fitness.weight.percentcorrect=1
or.fitness.weight.wsose=1
or.fitness.weight.distance=0
or.fitness.weight.distance.inverse=0
or.performance.metric=or.fitness.weight.percentcorrect
or.numtrials=200
or.saveimages=false
output.dir=../or4


################
# CPPN/AnjiNet #
################
#input and output size determined by hyperneat settings
#stimulus.size=7
#response.size=1
initial.topology.activation=random
initial.topology.fully.connected=true
initial.topology.num.hidden.neurons=0
initial.topology.activation.input=linear
initial.topology.activation.output=sigmoid
initial.topology.activation.random.allowed=sigmoid, gaussian, sine, absolute, linear, clamped-linear, sign
recurrent=disallowed
recurrent.cycles=1
#[1, 500]
weight.max=3
weight.min=-3


#####################
# HyperNEAT/GridNet #
#####################

ann.transcriber.class=com.ojcoleman.ahni.transcriber.HyperNEATTranscriberBain
#ann.transcriber.bain.maxrecurrentcyclesearchlength=20
ann.transcriber.bain.executionmode=SEQ

ann.transcriber.neuron.model=com.ojcoleman.bain.neuron.rate.SigmoidBipolarNeuronCollection
ann.transcriber.synapse.model=com.ojcoleman.bain.synapse.rate.FixedSynapseCollection

#ann.transcriber.class=com.ojcoleman.ahni.transcriber.HyperNEATTranscriberGridNet
#ann.hyperneat.activation.function=sigmoid
ann.hyperneat.feedforward=true
#ann.hyperneat.cyclesperstep=4  not required for feed forward
ann.hyperneat.enablebias=true
ann.hyperneat.includedelta=true
ann.hyperneat.includeangle=true
ann.hyperneat.useinputlayerencoding=false

ann.hyperneat.connection.expression.threshold=0.2
ann.hyperneat.connection.range=999
ann.transcriber.connection.weight.min=-2
ann.transcriber.connection.weight.max=2

ann.hyperneat.depth=3
ann.hyperneat.height=21,6,1
ann.hyperneat.width=21,6,1

#.....................
#. . . . . . . . . . .
#.   .   .   .   .   .
#.                   .

#############
# persistence
#############
persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.enable=false
persist.all=false
persist.champions=false
persist.last=false
persist.load.genotype=false
id.file=./db/id.xml
neat.id.file=./db/neatid.xml

##############
# presentation
##############
presentation.generate=false
presentation.dir=./nevt

#########
# logging
#########
log.pergenerations=1
log4j.rootLogger=INFO, C
log4j.appender.C=org.apache.log4j.ConsoleAppender
#log4j.appender.F=org.apache.log4j.FileAppender
#log4j.appender.F=org.apache.log4j.RollingFileAppender
#log4j.appender.F.File=/home/data/ai/unsw/project/software/anji/log/or3.log
#log4j.appender.F.MaxFileSize=10MB
#log4j.appender.F.MaxBackupIndex=20
log4j.appender.C.layout=org.apache.log4j.PatternLayout
#log4j.appender.F.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%-5p %m%x%n
#log4j.appender.F.layout.ConversionPattern=%-5p %m%x%n



#######################################
# parameter tuning via ParameterTuner #
#######################################

parametertuner.numruns=75
parametertuner.numgens=50
parametertuner.solvedperformance=0.95
#parametertuner.htcondor=\
#  jar_files = ../../../lib/aparapi.jar ../../../lib/bain.jar ../../../lib/commons-lang3-3.1.jar ../../../lib/commons-math3-3.1.1.jar ../../../lib/jakarta-regexp-1.3.jar ../../../lib/jcommander.jar ../../../lib/log4j.jar ../../../lib/wildcard-1.03.jar
#  Rank                  = kflops \n \
#  +RequiresWholeMachine = True \n \
#  notification = Never

parametertuner.tune.0.prop=add.neuron.mutation.rate
parametertuner.tune.0.type=float
parametertuner.tune.0.adjust.type=factor
parametertuner.tune.0.adjust.amount=2
parametertuner.tune.0.initial=0.1
parametertuner.tune.0.max=100

parametertuner.tune.1.prop=add.connection.mutation.rate
parametertuner.tune.1.type=float
parametertuner.tune.1.adjust.type=factor
parametertuner.tune.1.adjust.amount=2
parametertuner.tune.1.initial=2
parametertuner.tune.1.max=100

parametertuner.tune.2.prop=weight.mutation.rate
parametertuner.tune.2.type=float
parametertuner.tune.2.adjust.type=factor
parametertuner.tune.2.adjust.amount=2
parametertuner.tune.2.initial=0.1

parametertuner.tune.3.prop=weight.mutation.std.dev
parametertuner.tune.3.type=float
parametertuner.tune.3.adjust.type=factor
parametertuner.tune.3.adjust.amount=2
parametertuner.tune.3.initial=0.1
parametertuner.tune.3.max=100

parametertuner.tune.4.prop=speciation.target
parametertuner.tune.4.type=integer
parametertuner.tune.4.adjust.type=factor
parametertuner.tune.4.adjust.amount=2
parametertuner.tune.4.initial=8

parametertuner.tune.5.prop=popul.size
parametertuner.tune.5.type=integer
parametertuner.tune.5.adjust.type=factor
parametertuner.tune.5.adjust.amount=2
parametertuner.tune.5.initial=100

parametertuner.tune.6.prop=initial.topology.activation.output
parametertuner.tune.6.type=discrete
parametertuner.tune.6.adjust.type=ALL
parametertuner.tune.6.initial=1
parametertuner.tune.6.discrete_values=linear ; sigmoid ; sigmoid-bipolar ; sqrt-linear

parametertuner.tune.7.prop=initial.topology.activation.random.allowed
parametertuner.tune.7.type=discrete
parametertuner.tune.7.adjust.type=ALL
parametertuner.tune.7.initial=0
parametertuner.tune.7.discrete_values=sigmoid, gaussian, sine, absolute ; sigmoid, gaussian, sine, absolute, reciprocal, multiply, divide, linear, clamped-linear, ramp, power ; sigmoid, gaussian, sine, absolute, reciprocal, multiply, divide, linear, and, or, xor, clamped-linear, ramp, power

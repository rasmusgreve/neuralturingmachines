# This file contains general settings for the NEAT algorithm configured to create CPPNs for HyperNEAT.


# If set to "true" then substitutions present in property values will be enabled. Substitutions have the format $([key]), where [key] is the key of another property.
substitution.enable=true

popul.size=1000

performance.target=0.99
performance.target.type=higher
# If greater than 1 then use an average of the best performance over this many generations.
performance.target.average=10

#false means mutation probabilities are applied to all possible places a mutation could occur
#true means probabilities apply to individual as a whole; only one topological mutation can occur per individual
#note that this applies only to topological mutations, not weight mutations
topology.mutation.classic=true

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.03
add.neuron.mutation.rate=0.005

# Mutation rate for operator that adds neurons anywhere in the network (as 
# opposed to regular add neuron operator that only adds them in place of 
# existing connections). Only works for topology.mutation.classic=false
add.neuron.anywhere.mutation.rate=$(add.neuron.mutation.rate)

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.4
add.connection.mutation.rate=0.1
#[0.01, 0.3]
remove.connection.mutation.rate=0.01
#only remove weights with magnitude smaller than this
remove.connection.max.weight=0.5

#[0.1, 0.8]
weight.mutation.rate=0.2
#[1.0, 2.0] dependent on (CPPN) weight.max/min?
weight.mutation.std.dev=0.5
# The amount to perturb weights by when generating the initial population. Default is weight.mutation.std.dev
#weight.mutation.std.dev.initial=0.01

#percent of individuals used as parents
survival.rate=0.3
#proportion of sexual (crossover) versus asexual reproduction.
crossover.proportion=0.5
# the probability that an individual produced by the crossover operator will be a candidate for having mutations applied to it (independent of other mutation probabilities).
crossover.mutate.probability=0.5

#[1, 5]
selector.elitism.min.specie.size=0
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.1
#min number to select from a species (if it has size >=  selector.elitism.min.specie.size), default is the number of objectives defined by the fitness function.
selector.elitism.min.to.select=0
# The NaturalSelector to use to perform the parent (and elite) selection. Default is "auto", which will choose between 
# com.anji.integration.SimpleSelector for single objectives and com.ojcoleman.ahni.misc.NSGAIISelector for multiple objectives.
selector.class=auto
selector.min.generations=0
selector.max.stagnant.generations=100000
selector.speciated.fitness=true


############
# speciation
############
#species distance factors
#c1, excess genes factor [1.0, 2.0]
#chrom.compat.excess.coeff=2
#c2, disjoint genes factor [1.0, 2.0]
#chrom.compat.disjoint.coeff=2
#c3, Weight difference factor [0.2, 3.0]
#chrom.compat.common.coeff=0.2

# initial compatibility threshold [0.1, 4.0], relative to c#
#speciation.threshold=8
#speciation.threshold.min=0
#speciation.threshold.max=128

# Target number of species, default is popul.size ^ 0.6 (bit more than square root)
#speciation.target=50


#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=1
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=1
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=1

chrom.compat.mismatch_use_values=true

#speciation.class=com.anji.neat.SpeciationStrategyKMeans
speciation.threshold=16
speciation.target=25


################
# CPPN/AnjiNet #
################
#input and output size determined by fitness function settings
#stimulus.size=6
#response.size=6
initial.topology.activation=random
initial.topology.fully.connected=true
initial.topology.num.hidden.neurons=0
initial.topology.activation.input=linear
# Using an activation function with range [0, 1] or [-1, 1] causes the transcriber to scale the output to the substrate weight range, rather than truncating it to that range.
initial.topology.activation.output=linear
#initial.topology.activation.random.allowed=sigmoid, gaussian, sine, absolute
initial.topology.activation.random.allowed=sigmoid, gaussian, sine, absolute, reciprocal, multiply, divide, linear, clamped-linear, ramp, power
#initial.topology.activation.random.allowed=absolute, sigmoid-bipolar, gaussian, sine, reciprocal, multiply, divide, linear, and, or, xor, clamped-linear, ramp, power
#initial.topology.activation.random.allowed=absolute, sigmoid, gaussian, sine
#initial.topology.activation.random.probabilities=0.2, 1, 0.5, 0.5, 0.2, 0.1
bias.via.input=false

recurrent=disallowed
recurrent.cycles=2
#[1, 500]
# Set to 3 as this is the magnitude for one connection receiving an input of 1 to drive a (bipolar-)sigmoid or gaussian to saturation.
#weight.min=-20
weight.max=4

# Reproduces the HyperNEAT-LEO with global locality seed experiment as 
# described in Constraining Connectivity to Encourage Modularity in HyperNEAT
# (2011) In: Proceedings of the Genetic and Evolutionary Computation Conference
# To disable the LEO extension and reproduce the original HyperNEAT experiment set ann.hyperneat.leo=false

#random.seed=1234567
run.name=retina-problem-hyperneat
run.reset=true

###########
# evolution
###########
num.runs=30
num.generations=2500
popul.size=500

performance.target=1
performance.target.type=higher

#false means mutation probabilities are applied to all possible places a mutation could occur
#true means probabilities apply to individual as a whole; only one topological mutation can occur per individual
#note that this applies only to topological mutations, not weight mutations
topology.mutation.classic=true

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.03
add.neuron.mutation.rate=0.03
#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.4
add.connection.mutation.rate=0.1
#[0.01, 0.3]
remove.connection.mutation.rate=0.05
#only remove weights with magnitude smaller than this
remove.connection.max.weight=50

#should be 1.0
prune.mutation.rate=1.0

#[0.1, 0.8]
weight.mutation.rate=0.8
#[1.0, 2.0] dependent on weight.max/min?
weight.mutation.std.dev=0.5
# The amount to perturb weights by when generating the initial population. Default is weight.mutation.std.dev
weight.mutation.std.dev.initial=0.01

#percent of individuals used as parents
survival.rate=0.3
#proportion of sexual (crossover) versus asexual reproduction.
crossover.proportion=0.25
# the probability that an individual produced by the crossover operator will be a candidate for having mutations applied to it (independent of other mutation probabilities).
crossover.mutate.probability=0.1

#[1, 5]
selector.elitism.min.specie.size=0
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.1
#min number to select from a species (if it has size >=  selector.elitism.min.specie.size)
selector.elitism.min.to.select=1
selector.roulette=false
selector.max.stagnant.generations=500
selector.speciated.fitness=true


############
# speciation
############
#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=1.0
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=1.0
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=1.0

#compatability threshold [0.1, 4.0], relative to c#
speciation.threshold=0.5
speciation.target=20
speciation.threshold.change=0.05


##################
# fitness function
##################
fitness_function.class=com.ojcoleman.ahni.experiments.RetinaProblemFitnessFunction
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=0
#if fitness.hyperneat.scale.factor > 1 and fitness.hyperneat.scale.times > 0 
#then the substrate height, width and connection.range will be multiplied 
#by fitness.hyperneat.scale.factor every time fitness.hyperneat.scale.fitness 
#is reached, at most fitness.hyperneat.scale.times times.
fitness.hyperneat.scale.factor=2
fitness.hyperneat.scale.times=0
fitness.hyperneat.scale.performance=0.95
fitness.hyperneat.scale.recordintermediateperformance=true

#experiment specific
fitness.function.error.type.output=SAE
fitness.function.error.type.trial=SAE
fitness.function.error.conversion.type=inverse
fitness.function.performance.type=percent-correct
fitness.function.error.acceptable=0.99
fitness.function.log.champ.evaluation.pergenerations=100


################
# CPPN/AnjiNet #
################
#input and output size determined by hyperneat settings
#stimulus.size=7
#response.size=1
initial.topology.activation=random
initial.topology.fully.connected=false
initial.topology.num.hidden.neurons=0
initial.topology.activation.input=linear
initial.topology.activation.output=linear
initial.topology.activation.random.allowed=absolute, sigmoid-bipolar, gaussian, sine, step, ramp
initial.topology.activation.random.probabilities=0.2, 1, 0.5, 0.5, 0.2, 0.1

recurrent=disallowed
recurrent.cycles=1
#[1, 500]
weight.max=6
weight.min=-6


#####################
# HyperNEAT/GridNet #
#####################
ann.transcriber.class=com.ojcoleman.ahni.transcriber.HyperNEATTranscriberBain
ann.transcriber.neuron.model=com.ojcoleman.bain.neuron.rate.SigmoidBipolarNeuronCollection
ann.transcriber.synapse.model=com.ojcoleman.bain.synapse.rate.FixedSynapseCollection

ann.hyperneat.feedforward=true
#For networks with recurrent connections, the number of activation cycles to perform each time the substrate network is presented with new input and queried for its output. 
#ann.hyperneat.cyclesperstep=1
ann.hyperneat.enablebias=true
ann.hyperneat.includedelta=true
ann.hyperneat.includeangle=false
ann.hyperneat.useinputlayerencoding=true

# Standard thresholding. 0.3 corresponds to the Low Uniform experiment.
ann.hyperneat.connection.expression.threshold=0.3

# LEO options. If both true corresponds to the "LEO CPPN With Locality Seed" experiment. If only ann.hyperneat.leo=true then corresponds to the "LEO CPPN Without Seed" experiment.
# If true use the Link Expression Output enhancement instead of a threshold (i.e. instead of ann.hyperneat.connection.expression.threshold)
ann.hyperneat.leo=true
# Enable or disable seeding of the initial population of CPPNs to incorporate a bias towards local connections via the Link Expression Output (LEO). Default is "false".
#ann.hyperneat.leo.localityseeding=true

# Set-up the "x-locality" seed for the initial population CPPNs (ann.hyperneat.leo.localityseeding can only create a "global-locality" seed).
hyperneat.cppn.initial=\
h0:gaussian, \
h1:step, \
c:xs:h0:1, \
c:xt:h0:-1, \
c:b:h1:-1, \
c:h0:h1:1, \
c:h1:l0:1

ann.transcriber.connection.weight.min=-6
ann.transcriber.connection.weight.max=6

ann.hyperneat.depth=4
ann.hyperneat.height=2, 2 ,1, 1
ann.hyperneat.width=4, 4, 4, 2
ann.hyperneat.range.x=-1,1
ann.hyperneat.range.y=-1,1
ann.hyperneat.range.z=1,0.25
ann.hyperneat.layer.positions.3=(-0.5, 0), (0.5, 0)

#############
# persistence
#############
persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.enable=false
persist.all=false
persist.champions=false
persist.last=false
persist.load.genotype=false
id.file=./db/id.xml
neat.id.file=./db/neatid.xml

##############
# presentation
##############
presentation.generate=false
presentation.dir=./nevt

#########
# logging
#########
# How often to produce a line in the log containing a brief summary of the current progress.
log.pergenerations=10

# FileAppenders with the name RunLog receive special treatment: for each run the output will be directed to a file 
# with the name specified by log4j.appender.RunLog.File in the directory [output.dir]/[run number]/
log4j.rootLogger=INFO, C, RunLog
log4j.appender.C=org.apache.log4j.ConsoleAppender
log4j.appender.RunLog=org.apache.log4j.FileAppender
log4j.appender.RunLog.File=log.txt
log4j.appender.C.layout=org.apache.log4j.PatternLayout
log4j.appender.RunLog.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%-5p %m%x%n
log4j.appender.RunLog.layout.ConversionPattern=%-5p %m%x%n

################
# other output #
################
output.dir=../retina-problem-hyperneat
# Whether to log the champ to a text file and/or image. N < 0 indicates no logging, N=0 indicates 
# only at the end of evolution, N > 0 indicates every N generations and after evolution has finished.
log.champ.tostring=100
log.champ.toimage=100

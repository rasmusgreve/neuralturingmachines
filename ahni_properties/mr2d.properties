#random.seed=12345678
run.name=mr2d
run.reset=true

# If set to "true" then substitutions present in property values will be enabled. Substitutions have the format $([key]), where [key] is the key of another property.
substitution.enable=true

properties.include=properties/neat-hn, properties/network-soltoggio, properties/misc
num.runs=1
num.generations=100000


##################
# fitness function
##################
fitness_function.class=com.ojcoleman.ahni.experiments.mr2d.MobileRobot2D
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=0

#fitness.function.multi.class=com.ojcoleman.ahni.evaluation.novelty.GenericBehaviourEvaluator
fitness.function.multi.class=com.ojcoleman.ahni.evaluation.mocostfunctions.BainNNConnectionCountCost
#fitness.function.multi.class=com.ojcoleman.ahni.evaluation.novelty.GenericBehaviourEvaluator, com.ojcoleman.ahni.evaluation.mocostfunctions.BainNNConnectionCountCost

# The environment class to use for simulations. Defaults to com.ojcoleman.ahni.experiments.mr2d.Dyn4JEnvironment.
#fitness.function.mr2d.env.class=com.ojcoleman.ahni.experiments.mr2d.Dyn4JEnvironment

# The number of environments to evaluate candidates against. Increasing this will provide a more accurate
# evaluation but take longer. If the value is <= 0 then the number of environments to use will be determined
# automatically.
fitness.function.mr2d.env.count=16

# The fraction of environments that should be replaced with new environments per generation. This is evaluated probabilistically.
fitness.function.mr2d.env.replacerate=0

# If and what type of reward values should be assigned to food/poison object types. Possible values are
# "simple", "complex" and "real" with respective possible reward values of {-1, 1}, {-1, -0.5, 0, 0.5, 1}
# and any real value in range [-1, 1]. Default is "simple". If "none" is given then no food/poison object types are included.
fitness.function.mr2d.env.object.type.food_poison=simple

# How many "pushable" object types to include. A pushable object type may be pushed around and will push other objects 
# if they collide but has no other effect. Default is 0.
fitness.function.mr2d.env.object.type.pushable=0

# The number of objects.
fitness.function.mr2d.env.object.count=6

# Seed to use to generate and simulate environments. If not specified then system time will be used.
#fitness.function.mr2d.env.randomseed=123

# The number of environment simulation steps per simulated second. The higher this is the more accurate the simulation. Default is 30. 
fitness.function.mr2d.env.steps_per_sec=24


# The maximum length of time in seconds that the agent will spend in an environment (the simulation is terminated early if the environment
# is "completed", for example all food items collected or some other goal has been reached). Default is 10s.
fitness.function.mr2d.agent.lifetime=8

# The number of range and colour sensors on the robot.
fitness.function.mr2d.agent.sensor.count=3
	
# The view angle in degrees of the range and colour sensors on the robot.
fitness.function.mr2d.agent.sensor.viewangle=20

# Factor controlling linear speed of the agent. Default is 0.5.
#fitness.function.mr2d.agent.speed.linear=1

# Factor controlling rotational speed of the agent. Default is 0.5.
#fitness.function.mr2d.agent.speed.rotation=1

	
# If true enables novelty search for which behaviours are defined by the current state for each step of each trial
# of each environment. Default is false.
fitness.function.mr2d.noveltysearch=true
# If set to an integer > 0 then this many environments will be used to characterise an agents behaviour for novelty
# search. Defaults to fitness.function.mr2d.env.count.
#fitness.function.mr2d.noveltysearch.envs.count=
# If true then makes novelty search the only objective. Performance values are still calculated.  Default is false. 
# If true then fitness.function.mr2d.noveltysearch is forced to true and fitness.function.mr2d.env.replacerate is 
# forced to 0, and fitness.function.mr2d.noveltysearch.envs.count is forced to fitness.function.mr2d.env.count, so 
# that the same environments are used for calculating performance and novelty.
fitness.function.mr2d.noveltysearch.only=false
# The number of samples to take of each environment to generate the behaviour. Default is 1.
#fitness.function.mr2d.noveltysearch.samples_per_env=$(fitness.function.mr2d.agent.lifetime)


######## Novelty search (global parameters)

# The number of nearest neighbours to consider when determining the sparseness in a region and so whether to add a new individual to the archive. Default is 30.
fitness.function.novelty.k=15

# The novelty threshold to determine whether an individual is novel enough to add to the archive. The novelty
# of an individual is always in the range [0, 1], thus the threshold should also be within this range. Default
# is 0.05. An alternative method where individuals are added probabilistically can be used by removing this option
# and setting fitness.function.novelty.add_probability > 0. This option is mutually exclusive with 
# fitness.function.novelty.add_probability
#fitness.function.novelty.threshold=0.4

# The minimum value to decrease the novelty threshold to (the threshold is slowly reduced if no individuals are
# added in a generation). Default is 0.05 * fitness.function.novelty.threshold.
#fitness.function.novelty.threshold.min=0.0025

# The probability for each individual from the current generation that it will be added to the archive. For 
# example if the population size is 1000 and fitness.function.novelty.add_probability == 0.001, then on average
# one (randomly selected) individual will be added to the archive. This option is mutually exclusive with 
# fitness.function.novelty.threshold. Default is 0 (disabled, threshold method will be used instead).
fitness.function.novelty.add_probability=0.005


######## Generic novelty search fitness function (if included in fitness.function.multi.class)

# The number of sequences to test individuals on.
fitness.function.generic_novelty.sequence_count=8

# The number of output samples to record for each sequence.
fitness.function.generic_novelty.sample_count=4

# Output samples will be taken every [fitness.function.generic_novelty.sampling_interval]th step in the sequence. Default is 1 (take a sample every step).
fitness.function.generic_novelty.sampling_interval=4

# The minimum input value. Default is 0.
fitness.function.generic_novelty.input.min=-1

# The maximum input value. Default is 1.
fitness.function.generic_novelty.input.max=1


######## target connection count fitness function (if included in fitness.function.multi.class)

# The target proportion of synapses based on maximum possible number of synapses (calculated as number of neurons squared). Default is 0.
#fitness.function.connection_count_cost.target=0.2



#############
# HyperNEAT #
#############

# Size of the (substrate) neural network, layer by layer. 'f' indicates dimensions defined by fitness function. 
ann.hyperneat.width=f,$(fitness.function.mr2d.agent.sensor.count),f
ann.hyperneat.height=f,2,f

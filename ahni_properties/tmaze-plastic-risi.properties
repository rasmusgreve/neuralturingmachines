# Solves the T-maze navigation task described by: Sebastian Risi and Kenneth O. Stanley (2010) "Indirectly Encoding 
# Neural Plasticity as a Pattern of Local Rules" using a plastic network using the parameterised plasticity rule
# described by S. Risi, K.O. Stanley (2012) A Unified Approach to Evolving Plasticity and Neural Geometry.

#random.seed=12345678
run.name=tmaze-plastic-risi
run.reset=true

# If set to "true" then substitutions present in property values will be enabled. Substitutions have the format $([key]), where [key] is the key of another property.
substitution.enable=true

###########
# evolution
###########

num.runs=1
num.generations=2000
popul.size=1000

performance.target=1.0
performance.target.type=higher
# If greater than 1 then use an average of the best performance over this many generations.
performance.target.average=10

#false means mutation probabilities are applied to all possible places a mutation could occur
#true means probabilities apply to individual as a whole; only one topological mutation can occur per individual
#note that this applies only to topological mutations, not weight mutations
topology.mutation.classic=false

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.03
add.neuron.mutation.rate=0.01

# Mutation rate for operator that adds neurons anywhere in the network (as 
# opposed to regular add neuron operator that only adds them in place of 
# existing connections). Only works for topology.mutation.classic=false
add.neuron.anywhere.mutation.rate=$(add.neuron.mutation.rate)

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.4
add.connection.mutation.rate=0.2
#[0.01, 0.3]
remove.connection.mutation.rate=0.01
#only remove weights with magnitude smaller than this
remove.connection.max.weight=0.5

#[0.1, 0.8]
weight.mutation.rate=0.5
#[1.0, 2.0] dependent on (CPPN) weight.max/min?
weight.mutation.std.dev=0.5
# The amount to perturb weights by when generating the initial population. Default is weight.mutation.std.dev
#weight.mutation.std.dev.initial=0.01

#percent of individuals used as parents
survival.rate=0.3
#proportion of sexual (crossover) versus asexual reproduction.
crossover.proportion=0.5
# the probability that an individual produced by the crossover operator will be a candidate for having mutations applied to it (independent of other mutation probabilities).
crossover.mutate.probability=0.5

#[1, 5]
selector.elitism.min.specie.size=0
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.2
#min number to select from a species (if it has size >=  selector.elitism.min.specie.size), default is the number of objectives defined by the fitness function.
selector.elitism.min.to.select=0
# The NaturalSelector to use to perform the parent (and elite) selection. Default is com.anji.integration.SimpleSelector.
#selector.class=com.ojcoleman.ahni.misc.NSGAIISelector
selector.min.generations=0
selector.max.stagnant.generations=100000
selector.speciated.fitness=true


############
# speciation
############
#species distance factors
#c1, excess genes factor [1.0, 2.0]
#chrom.compat.excess.coeff=2
#c2, disjoint genes factor [1.0, 2.0]
#chrom.compat.disjoint.coeff=2
#c3, Weight difference factor [0.2, 3.0]
#chrom.compat.common.coeff=0.2

# initial compatibility threshold [0.1, 4.0], relative to c#
#speciation.threshold=8
#speciation.threshold.min=0
#speciation.threshold.max=128

# Target number of species, default is popul.size ^ 0.6 (bit more than square root)
#speciation.target=50


#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=1
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=1
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=1

chrom.compat.mismatch_use_values=true

#speciation.class=com.anji.neat.SpeciationStrategyKMeans
speciation.target=24
speciation.threshold=50


##################
# fitness function
##################
fitness_function.class=com.ojcoleman.ahni.experiments.TMaze
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=0

#fitness.function.multi.class=com.ojcoleman.ahni.evaluation.novelty.GenericBehaviourEvaluator
#fitness.function.multi.class=com.ojcoleman.ahni.evaluation.mocostfunctions.BainNNConnectionCountCost
#fitness.function.multi.class=com.ojcoleman.ahni.evaluation.novelty.GenericBehaviourEvaluator, com.ojcoleman.ahni.evaluation.mocostfunctions.BainNNConnectionCountCost

#experiment specific
# If true then a double T-maze is used (four end locations).
fitness.function.tmaze.double=true
# number of trials in an evaluation
fitness.function.tmaze.trial.count=160
# number of times the reward should switch places during an evaluation (it's always randomly placed for the first trial).
fitness.function.tmaze.reward.switch.count=7
# variation in switch times (fraction of number of trials between switching).
fitness.function.tmaze.reward.switch.variation=0.1
# reward value of low reward
fitness.function.tmaze.reward.low=0.2
# reward value of high reward
fitness.function.tmaze.reward.high=1
# reward value upon crashing
fitness.function.tmaze.reward.crash=-0.4
# Reward value given upon failing to return home. If this is set to 0 then the agent is not required to return home.
fitness.function.tmaze.reward.failreturnhome=0
# "colour" value of low reward
fitness.function.tmaze.reward.low.colour=0.1
# "colour" value of high reward
fitness.function.tmaze.reward.high.colour=1
# length of passages/corridors
fitness.function.tmaze.passage.length=2
# Set to "range" to use range-finder type inputs indicating if walls are present to the left, right and forward,
# and a reward input. Set to "features" to use inputs that indicate the following conditions: turn required; maze
# end reached; home position reached; reward.
fitness.function.tmaze.input.type=range
# Set to "single" to use a single output to indicate the action to take next. Set to "multiple" to use three
# outputs to indicate which action to take next.
fitness.function.tmaze.output.type=multiple



######## Novelty search (global parameters)

# The number of nearest neighbours to consider when determining the sparseness in a region and so whether to add a new individual to the archive. Default is 30.
fitness.function.novelty.k=15

# The novelty threshold to determine whether an individual is novel enough to add to the archive. The novelty
# of an individual is always in the range [0, 1], thus the threshold should also be within this range. Default
# is 0.05. An alternative method where individuals are added probabilistically can be used by removing this option
# and setting fitness.function.novelty.add_probability > 0. This option is mutually exclusive with 
# fitness.function.novelty.add_probability
#fitness.function.novelty.threshold=0.4

# The minimum value to decrease the novelty threshold to (the threshold is slowly reduced if no individuals are
# added in a generation). Default is 0.05 * fitness.function.novelty.threshold.
#fitness.function.novelty.threshold.min=0.0025

# The probability for each individual from the current generation that it will be added to the archive. For 
# example if the population size is 1000 and fitness.function.novelty.add_probability == 0.001, then on average
# one (randomly selected) individual will be added to the archive. This option is mutually exclusive with 
# fitness.function.novelty.threshold. Default is 0 (disabled, threshold method will be used instead).
fitness.function.novelty.add_probability=0.001


######## Generic novelty search fitness function (if included in fitness.function.multi.class)

# The number of sequences to test individuals on.
fitness.function.generic_novelty.sequence_count=8

# The number of output samples to record for each sequence.
fitness.function.generic_novelty.sample_count=4

# Output samples will be taken every [fitness.function.generic_novelty.sampling_interval]th step in the sequence. Default is 1 (take a sample every step).
fitness.function.generic_novelty.sampling_interval=4

# The minimum input value. Default is 0.
fitness.function.generic_novelty.input.min=-1

# The maximum input value. Default is 1.
fitness.function.generic_novelty.input.max=1


######## target connection count fitness function (if included in fitness.function.multi.class)

# The target proportion of synapses based on maximum possible number of synapses (calculated as number of neurons squared). Default is 0.
#fitness.function.connection_count_cost.target=0.2



################
# CPPN/AnjiNet #
################
#input and output size determined by fitness function settings
#stimulus.size=6
#response.size=6
initial.topology.activation=random
initial.topology.fully.connected=true
initial.topology.num.hidden.neurons=0
initial.topology.activation.input=linear
# Using an activation function with range [0, 1] or [-1, 1] causes the transcriber to scale the output to the substrate weight range, rather than truncating it to that range.
initial.topology.activation.output=linear
initial.topology.activation.random.allowed=sigmoid, gaussian, sine, absolute
#initial.topology.activation.random.allowed=absolute, sigmoid-bipolar, gaussian, sine, reciprocal, multiply, divide, linear, and, or, xor, clamped-linear, ramp, power
#initial.topology.activation.random.allowed=absolute, sigmoid, gaussian, sine
#initial.topology.activation.random.probabilities=0.2, 1, 0.5, 0.5, 0.2, 0.1
bias.via.input=false

recurrent=disallowed
recurrent.cycles=2
#[1, 500]
# Set to 3 as this is the magnitude for one connection receiving an input of 1 to drive a (bipolar-)sigmoid or gaussian to saturation.
#weight.min=-20
weight.max=3


#####################
# HyperNEAT/BainNN #
#####################
#ann.transcriber.class=com.ojcoleman.ahni.transcriber.NEATTranscriberBain
ann.transcriber.class=com.ojcoleman.ahni.transcriber.HyperNEATTranscriberBain
#ann.transcriber.class=com.ojcoleman.ahni.transcriber.ESHyperNEATTranscriberBain
#ann.transcriber.bain.maxrecurrentcyclesearchlength=20
ann.transcriber.bain.executionmode=SEQ

ann.transcriber.neuron.model=com.ojcoleman.bain.neuron.rate.RisiModulatoryNeuronCollection
ann.transcriber.synapse.model=com.ojcoleman.bain.synapse.rate.RisiModulatorySynapseCollection
#ann.transcriber.neuron.model=com.ojcoleman.bain.neuron.rate.SigmoidBipolarNeuronCollection
#ann.transcriber.synapse.model=com.ojcoleman.bain.synapse.rate.Niv2002SynapseCollection

# Create CPPN outputs that set the parameters for each neuron.
#ann.transcriber.neuron.model.params=modBias
# Min and max values for model parameters.
#ann.transcriber.neuron.model.params.min=-$(ann.transcriber.connection.weight.max)
#ann.transcriber.neuron.model.params.max=$(ann.transcriber.connection.weight.max)
#ann.transcriber.neuron.model.params.expression.threshold=0.1

# Create CPPN outputs that set the parameters for each synapse.
ann.transcriber.synapse.model.params=n,a,b,c
# Min and max values for model parameters.
ann.transcriber.synapse.model.params.min=-8,-1,-1,-1
ann.transcriber.synapse.model.params.max=8,1,1,1
#ann.transcriber.synapse.model.params.expression.threshold=0.2,0.1,0.1,0.1
ann.transcriber.synapse.model.params.expression.threshold=0.1,0.1,0.1,0.1
# Two synapse types: regular = 0, modulatory = 1
# Separate weight outputs from CPPN will be used for each type. 
ann.transcriber.synapse.model.types=modulatory,0,1
# This parameter in the synapse model will be set to 0 if the connection should not be expressed. This is typically applied to a "learning rate" parameter.
ann.transcriber.synapse.model.plasticitydisableparam=n

ann.hyperneat.feedforward=true
#For networks with recurrent connections, the number of activation cycles to perform each time the substrate network is presented with new input and queried for its output.
#For this experiment the network can decide when it's ready by setting the last output to a value greater than 0.5. 
ann.hyperneat.cyclesperstep=1
ann.hyperneat.enablebias=true
ann.hyperneat.includedelta=true
ann.hyperneat.includeangle=false
ann.hyperneat.useinputlayerencoding=true

ann.hyperneat.connection.expression.threshold=0
ann.hyperneat.leo=true
ann.hyperneat.leo.threshold=0.2
ann.hyperneat.leo.threshold.factordistance=false
ann.hyperneat.leo.threshold.directionalfactor=6,2,1
#ann.hyperneat.neo=true
#ann.hyperneat.neo.threshold=0

#ann.transcriber.connection.weight.min=-2
ann.transcriber.connection.weight.max=3

# input and output layer dimensions determined by fitness function
# set middle layers manually, corresponding to dimensionality of environment state?
#ann.hyperneat.width=f,$(fitness.function.rlcss.size),f
#ann.hyperneat.height=f,$(fitness.function.rlcss.size),f

ann.hyperneat.width=f,3,f
ann.hyperneat.height=f,2,f


ann.hyperneat.range.x=-1,1
ann.hyperneat.range.y=-1,1
ann.hyperneat.range.z=-1,1


# ES-HypernNEAT params (only if ann.transcriber.class=com.ojcoleman.ahni.transcriber.ESHyperNEATTranscriberBain)
ann.eshyperneat.iterations=1
ann.eshyperneat.depth.initial=1
ann.eshyperneat.depth.max=2
ann.eshyperneat.division.threshold=0.5
ann.eshyperneat.variance.threshold=0.03
ann.eshyperneat.band.threshold=0.3


#############
# persistence
#############
persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.enable=false
persist.all=false
persist.champions=false
persist.last=false
persist.load.genotype=false
id.file=./db/id.xml
neat.id.file=./db/neatid.xml

##############
# presentation
##############
presentation.generate=false
presentation.dir=./nevt

#########
# logging
#########
output.dir=/home/data/temp/ahni/$(run.name)
# How often to produce a line in the log containing a brief summary of the current progress.
log.pergenerations=1
# Whether to log the champ to a text file and/or image. N < 0 indicates no logging, N=0 indicates 
# only at the end of evolution, N > 0 indicates every N generations and after evolution has finished.
log.champ.tostring=50
log.champ.toimage=50
#log.selector.nsgaii=true


# FileAppenders with the name RunLog receive special treatment: for each run the output will be directed to a file 
# with the name specified by log4j.appender.RunLog.File in the directory [output.dir]/[run number]/
#log4j.rootLogger=INFO, C, RunLog
log4j.rootLogger=INFO, C, RunLog
log4j.appender.C=org.apache.log4j.ConsoleAppender
log4j.appender.RunLog=org.apache.log4j.FileAppender
log4j.appender.RunLog.File=log.txt
log4j.appender.C.layout=org.apache.log4j.PatternLayout
log4j.appender.RunLog.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%-5p %m%x%n
log4j.appender.RunLog.layout.ConversionPattern=%-5p %m%x%n



#######################################
# parameter tuning via ParameterTuner #
#######################################

parametertuner.numruns=75
parametertuner.numgens=2000
parametertuner.solvedperformance=0.99
parametertuner.htcondor=\
  jar_files = ../../lib/aparapi.jar ../../lib/bain.jar ../../lib/commons-lang3-3.1.jar ../../lib/commons-math3-3.1.1.jar ../../lib/jakarta-regexp-1.3.jar ../../lib/jcommander.jar ../../lib/log4j.jar ../../lib/wildcard-1.03.jar \n \
  +RequiresWholeMachine = True \n \
  Rank = kflops \n \
  notification = Never

parametertuner.tune.1.prop=speciation.target
parametertuner.tune.1.type=integer
parametertuner.tune.1.adjust.type=factor
parametertuner.tune.1.adjust.amount=2
parametertuner.tune.1.initial=24
parametertuner.tune.1.min=1
parametertuner.tune.1.max=1000

parametertuner.tune.10.prop=add.neuron.mutation.rate
parametertuner.tune.10.type=float
parametertuner.tune.10.adjust.type=factor
parametertuner.tune.10.adjust.amount=2
parametertuner.tune.10.initial=0.01
parametertuner.tune.10.min=0
parametertuner.tune.10.max=100

parametertuner.tune.20.prop=add.connection.mutation.rate
parametertuner.tune.20.type=float
parametertuner.tune.20.adjust.type=factor
parametertuner.tune.20.adjust.amount=2
parametertuner.tune.20.initial=0.2
parametertuner.tune.20.min=0
parametertuner.tune.20.max=100

parametertuner.tune.25.prop=weight.mutation.rate
parametertuner.tune.25.type=float
parametertuner.tune.25.adjust.type=factor
parametertuner.tune.25.adjust.amount=2
parametertuner.tune.25.initial=0.45
parametertuner.tune.25.min=0
parametertuner.tune.25.max=1

parametertuner.tune.30.prop=weight.mutation.std.dev
parametertuner.tune.30.type=float
parametertuner.tune.30.adjust.type=factor
parametertuner.tune.30.adjust.amount=2
parametertuner.tune.30.initial=0.5
parametertuner.tune.30.min=0
parametertuner.tune.30.max=100

parametertuner.tune.40.prop=ann.hyperneat.leo.threshold
parametertuner.tune.40.type=float
parametertuner.tune.40.adjust.type=factor
parametertuner.tune.40.adjust.amount=2
parametertuner.tune.40.initial=0.2
parametertuner.tune.40.min=0
parametertuner.tune.40.max=100

parametertuner.tune.50.prop=ann.transcriber.connection.weight.max
parametertuner.tune.50.type=float
parametertuner.tune.50.adjust.type=factor
parametertuner.tune.50.adjust.amount=2
parametertuner.tune.50.initial=3
parametertuner.tune.50.min=0
parametertuner.tune.50.max=100

parametertuner.tune.80.prop=initial.topology.activation.random.allowed
parametertuner.tune.80.type=discrete
parametertuner.tune.80.adjust.type=ALL
parametertuner.tune.80.initial=0
parametertuner.tune.80.discrete_values=sigmoid, gaussian, sine, absolute ; sigmoid, gaussian, sine, absolute, linear, clamped-linear, sign ; sigmoid, gaussian, sine, absolute, reciprocal, multiply, divide, linear, clamped-linear, ramp, power ; sigmoid, gaussian, sine, absolute, reciprocal, multiply, divide, linear, and, or, xor, clamped-linear, ramp, power


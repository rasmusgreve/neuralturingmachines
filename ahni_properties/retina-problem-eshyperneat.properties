# Reproduces the Retina Problem - ES-HyperNEAT-LEO with Geometry Seeding experiment as described in S. Risi, 
# K.O. Stanley (2012) An Enhanced Hypercube-Based Encoding for Evolving the Placement, Density and Connectivity 
# of Neurons. Artificial Life, Cambridge, MA 2012

#random.seed=1234567
run.name=retina-problem-eshyperneat
run.reset=true

###########
# evolution
###########
num.runs=2
num.generations=2500
popul.size=300

performance.target=1
performance.target.type=higher

#false means mutation probabilities are applied to all possible places a mutation could occur
#true means probabilities apply to individual as a whole; only one topological mutation can occur per individual
#note that this applies only to topological mutations, not weight mutations
topology.mutation.classic=true

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.03
add.neuron.mutation.rate=0.02
#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.4
add.connection.mutation.rate=0.03
#[0.01, 0.3]
remove.connection.mutation.rate=0.0
#only remove weights with magnitude smaller than this
remove.connection.max.weight=50

#should be 1.0
prune.mutation.rate=1.0

#[0.1, 0.8]. 0.5, 0.6
weight.mutation.rate=0.8
#[1.0, 2.0] dependent on weight.max/min?
weight.mutation.std.dev=1.0


#percent of individuals used as parents
survival.rate=0.3
#proportion of sexual (crossover) versus asexual reproduction
crossover.proportion=0.5

#[1, 5]
selector.elitism.min.specie.size=10
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.1
#min number to select from a species (if it has size >=  selector.elitism.min.specie.size)
selector.elitism.min.to.select=0
selector.roulette=false
selector.max.stagnant.generations=15
selector.max.stagnant.maintainfittest=true
selector.speciated.fitness=true


############
# speciation
############
#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=1.0
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=1.0
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=0.1

#compatability threshold [0.1, 4.0], relative to c#
speciation.threshold=0.2
speciation.target=20
speciation.threshold.change=0.01


##################
# fitness function
##################
fitness_function.class=com.ojcoleman.ahni.experiments.RetinaProblemFitnessFunction
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=0
#if fitness.hyperneat.scale.factor > 1 and fitness.hyperneat.scale.times > 0 
#then the substrate height, width and connection.range will be multiplied 
#by fitness.hyperneat.scale.factor every time fitness.hyperneat.scale.fitness 
#is reached, at most fitness.hyperneat.scale.times times.
fitness.hyperneat.scale.factor=2
fitness.hyperneat.scale.times=0
fitness.hyperneat.scale.performance=0.95
fitness.hyperneat.scale.recordintermediateperformance=true

#experiment specific
fitness.function.error.type.output=SAE
fitness.function.error.type.trial=SAE
fitness.function.error.conversion.type=inverse
fitness.function.log.champ.evaluation.pergenerations=25


################
# CPPN/AnjiNet #
################
#input and output size determined by hyperneat settings
#stimulus.size=7
#response.size=1
initial.topology.activation=random
initial.topology.fully.connected=true
initial.topology.num.hidden.neurons=0
initial.topology.activation.input=linear
initial.topology.activation.output=linear
initial.topology.activation.random.allowed=absolute, sigmoid, gaussian, linear, sine, step, ramp
recurrent=disallowed
recurrent.cycles=1
#[1, 500]
weight.max=3
weight.min=-3


#############
# HyperNEAT #
#############
ann.transcriber.class=com.ojcoleman.ahni.transcriber.ESHyperNEATTranscriberBain
ann.transcriber.neuron.model=com.ojcoleman.bain.neuron.rate.SigmoidBipolarNeuronCollection
ann.transcriber.synapse.model=com.ojcoleman.bain.synapse.rate.FixedSynapseCollection
ann.transcriber.bain.executionmode=SEQ
ann.transcriber.bain.maxrecurrentcyclesearchlength=20

# Attempt to produce feed forward networks.
ann.hyperneat.feedforward=true
# For networks with recurrent connections, the number of activation cycles to perform each time the substrate network is presented with new input and queried for its output. 
ann.hyperneat.cyclesperstep=2
ann.hyperneat.enablebias=true
ann.hyperneat.includedelta=true
ann.hyperneat.includeangle=false
ann.hyperneat.useinputlayerencoding=false

ann.transcriber.connection.weight.min=-5
ann.transcriber.connection.weight.max=5

# If true then the substrate is considered as occupying a 3D space, with the 
# inputs and outputs located on the XY plane at z=0 and z=1 respectively, and
# hidden neurons located on the XZ plane at y=0.5 (with respect to a unit-size hypercube).
# If false then all neurons are located in a 2D plane with X-Y axes.
ann.eshyperneat.3D.pseudo=true

# These are included to facilitate the use of the fitness function and automatic positioning of inputs and outputs.
ann.hyperneat.depth=2

# When querying CPPN translate from unit-size hypercube to hypercube with the following size/ranges.
ann.hyperneat.range.x=-1,1
# z in paper
ann.hyperneat.range.y=-1,1
# y in paper
ann.hyperneat.range.z=0,1


# ES-HypernNEAT params.
ann.eshyperneat.iterations=1
ann.eshyperneat.depth.initial=2
ann.eshyperneat.depth.max=4
ann.eshyperneat.division.threshold=0.5
ann.eshyperneat.variance.threshold=0.03
ann.eshyperneat.band.threshold=0.3

# Record the coordinates of neurons in the substrate. This allows for rendering the network.
ann.eshyperneat.record.coordinates=true

# If true use the Link Expression Output enhancement.
ann.hyperneat.leo=true

# The initial CPPN, includes LEO x-locality seeding and ES-HyperNEAT geometry seeding. 
hyperneat.cppn.initial=\
h0:gaussian, \
h1:gaussian, \
h2:sigmoid, \
h3:step, \
c:xs:h1:1, \
c:zs:h0:1, \
c:xt:h1:-1, \
c:zt:h0:-1, \
c:b:h0:0.333, \
c:b:h3:-1, \
c:h0:h2:1, \
c:h1:h3:1, \
c:h2:w0:1, \
c:h3:l0:1


#############
# persistence
#############
persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.enable=false
persist.all=false
persist.champions=false
persist.last=false
persist.load.genotype=false
id.file=./db/id.xml
neat.id.file=./db/neatid.xml

##############
# presentation
##############
presentation.generate=false
presentation.dir=./nevt

#########
# logging
#########
log.pergenerations=1
log4j.rootLogger=INFO, C
log4j.appender.C=org.apache.log4j.ConsoleAppender
#log4j.appender.F=org.apache.log4j.FileAppender
#log4j.appender.F=org.apache.log4j.RollingFileAppender
#log4j.appender.F.File=/home/data/ai/unsw/project/software/anji/log/or3.log
#log4j.appender.F.MaxFileSize=10MB
#log4j.appender.F.MaxBackupIndex=20
log4j.appender.C.layout=org.apache.log4j.PatternLayout
#log4j.appender.F.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%-5p %m%x%n
#log4j.appender.F.layout.ConversionPattern=%-5p %m%x%n

################
# other output #
################
output.dir=../retina-problem-eshyperneat
# Whether to log the champ to a text file and/or image. N < 0 indicates no logging, N=0 indicates 
# only at the end of evolution, N > 0 indicates every N generations and after evolution has finished.
log.champ.tostring=25
log.champ.toimage=25

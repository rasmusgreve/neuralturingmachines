ANJI_1_0
- initial release

ANJI_1_01
- added RELEASE_NOTES (this file)
- fixed ttt.properties
- added new activation functions EvSailSigmoidActivationFunction, InverseAbsActivationFunction, StepActivationFunction, SignedStepActivationFunction
- added sample SVG files in nevt/

ANJI_1_02
- added AnjiNet and modified AnjiActivator
- added com.anji.floatingeye.*
- moved min/max response settings to activation function
- removed isRecurrent() from Connection and *Connection
- added BiasConnection and RandomConnection 
- fixed bug with hardcoded dimension of stimuli in TargetFitnessFunction (thanks to Brian Edwards for spotting this)
- fixed some rounding errors when calculating slice of population filled by selector and reproduction operators didn't quite add up to the target population size
- now persists neat id XML file every generation; this enables restart of a run in case of crash
- log start/end time after each generation
- added option to configure input, hidden, and output neurons with different activation functions; also, activation function represented in chromosome.xml neuron element
- added topology.mutation.classic option; if set to true, mutations occur more like standard NEAT, where at most one topological mutation occurs per offspring per generation; in our tests this did not seem to make a big difference, but we include it for completeness

ANJI_2_00
- A lot of changes were made that will break backward compatibility.  In the future the code should stay more stable.
- com.anji.fingerprint package contains classes to handle fingerprint classification.
- com.anji.floatingeye package contains classes to build and operate a "floating eye" which is an agent that can move up and down, left and right, and zoom in and out relative to an image, or "surface".  FloatingEyeDisplay uses JFreeChart (http://www.jfree.org/jfreechart/index.php).
- com.anji.imaging package contains utility classes to handle image processing.  
- Split Gene into Gene and Allele (NeuronGene became NeuronGene and NeuronAllele, etc.).  Three reasons for this.  #1, it saves some memory.  e.g., if you have the same connection gene in 100 chromosomes, you had to store the source and destination neuron ID only once.  #2, it models alleles and genes more cleanly.  Any attributes that are shared among all chromosomes with the same gene are placed in the Gene object (e.g., source and destination neuron ID in ConnectionGene).  Attributes differing among chromosomes with the same gene (e.g., connection weight) go in the Allele object.  #3, it made the OO-Relational mapping easier.
- Deprecated org.jgap.FitnessFunction.  Prefer org.jgap.BulkFitnessFunction.
- Created XmlPersistable interface and implementing classes of Chromosome, Generation, Run, and Allele.  Moved XML logic from Chromosome to XmlPersistableChromosome, and from Gene, NeuronGene amd ConnectionGene to XmlPersistableAllele.  AnjiActivator now implements XmlPersistable.
- Moved Chromosome.distance() to ChromosomeMaterial.distance().
- Began adding support for Hibernate (http://www.hibernate.org/) OO-Relational mapping database tool.  Changed com.anji.persistence classes to have more domain-specific interface.  Class HibernatePersistence is incomplete.
- Collected speciation parameters into SpeciationParms object.
- Added GeneticEvent.GENOTYPE_START_GENETIC_OPERATORS_EVENT and GeneticEvent.GENOTYPE_FINISH_GENETIC_OPERATORS_EVENT.  These are used to load and persist ID map objects (which can get quite large) so they don't take up memory during evaluation.
- Moved JGAP test classes to ANJI project.
- Changed com.anji.integration.Transcriber from an abstract class to an interface.  Renamed com.anji.integration.ActivatorFactory to com.anji.integration.ActivatorTranscriber.  Renamed com.anji.integration.AnjiTranscriber to com.anji.integration.AnjiNetTranscriber.  In general, any class that converts a chromosome to a phenotype should implement Transcriber.  Removed TranscriberFactory.
- Added com.anji.integration.Evaluator, which takes a properties file and list of chromosomes on the command line.  Each chromosome is evaluated by the configured fitness function from the properties file, effectively running the fitness evaluation stage of a single generation.
- com.anji.integration.LogEventListener now logs chromosomes with max fitness.
- Moved com.anji.integration.Run to com.anji.run.Run.  com.anji.run package also contains Domain, Population, and Representation.  These aren't used now, but will be used to collect and persist multiple runs for reporting and evaluation purposes.
- Moved com.anji.neat.ActivationFunctionType to com.anji.nn.ActivationFunctionType.
- Made several more objects implement com.anji.util.Configurable.  Added more utility methods to com.anji.util.Properties to create and initialize objects.
- Made com.anji.neat.WeightMagnitudeComparator a public class (instead of an inner class in RemoveConnectionMutationOperator).
- Added com.anji.nn.TanhCubicActivationFunction.
- Added com.anji.nn.StepHourglassConnection.
- com.anji.polebalance contains classes to implement pole balancing. The goal of a pole balancing agent is to move a virtual cart back and forth on a 2-dimensional track, keeping 1 or 2 poles (the bottom of each is attached to a hinge in the center of the cart) balanced vertically.
- com.anji.roshambo contains classes to implement the game of roshambo, also commonly known as rock-scissors-paper.
- com.anji.gomoku contains classes to handle Go-Moku (see Gamerz.net for rules).
- com.anji.tournament classes handle tournaments and games.  Tic-Tac-Toe, Gomoku, and Roshambo games fit in this framework.

ANJI_2_01
- Compiled with JDK 1.4.2.  ANJI_2_00 mistakenly was compiled with 1.5.0.
